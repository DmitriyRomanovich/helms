apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.namespace }}-comms-strapi-secret
type: Opaque
data:
  azurestorageaccountkey: {{ .Values.strapiStorageAccountKey }}
  azurestorageaccountname: {{ .Values.strapiStorageAccountName }}
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ .Values.namespace }}-comms-strapi-storage-claim
  # Set this annotation to NOT let Kubernetes automatically create
  # a persistent volume for this volume claim.
  annotations:
    volume.beta.kubernetes.io/storage-class: ""
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 64Gi
  selector:
    # To make sure we match the claim with the exact volume, match the label
    matchLabels:
      usage: {{ .Values.namespace }}-comms-strapi-storage
  volumeName: {{ .Values.namespace }}-comms-strapi-storage
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.namespace }}-comms-strapi-storage
  # The label is used for matching the exact claim
  labels:
    usage: {{ .Values.namespace }}-comms-strapi-storage
spec:
  capacity:
    storage: 64Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  azureFile:
    # Replace with your secret name
    secretName: {{ .Values.namespace }}-comms-strapi-secret
    # Replace with correct storage share name
    shareName: {{ .Values.namespace }}-comms-strapi
    # In case the secret is stored in a different namespace
    secretNamespace: {{ .Values.namespace }}
    readOnly: false